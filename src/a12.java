public class a12 {
    /*
     * The sequence of triangle numbers is generated by adding the natural numbers.
     * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
     * ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     *
     * Let us list the factors of the first seven triangle numbers:
     *  1: 1
     *  3: 1, 3
     *  6: 1, 2, 3, 6
     *  10: 1, 2, 5, 10
     *  15: 1, 3, 5, 15
     *  21: 1, 3, 7, 21
     *  28: 1, 2, 4, 7, 14, 28
     * 28 is the first triangle number to have over 5 divisors.
     * What is the value of the first triangle number to have over five hundred
     * divisors?
     *
     * Answer: 76576500
     * Time: 72ms
     */

    public static void main(String[] args) {
        // Record current system time for efficiency findProduct
        final long start = System.currentTimeMillis();

        // Create a new problem object
        a12 problem = new a12();

        // Solve triangle number problem with needed divisors over given number
        problem.solve(5);

        // Output difference in time to console
        System.out.println(System.currentTimeMillis() - start + "ms");
    }

    private int findDivisors(int n) {
        // Initialise variable for counting divisors
        int d = 0;

        // Increment through numbers to find half of divisors
        for(int i = 1; i < Math.pow(n, 0.5); ++i)
            if(n % i == 0)
                d++;

        // Return full number of divisors
        return (d * 2);
    }

    private void solve(int limit) {
        // Initialise variables for counting
        int divisors, current = 0, i = 1;

        while(true) {
            // Assign new number to be next triangle number
            current += i;

            // Generate divisors count using current number
            divisors = findDivisors(current);

            // Check if the divisors count is greater than the needed limit of divisors
            if(divisors >= limit) {
                //System.out.println(i + " " + current + " " + divisors);
                System.out.printf("%d, %d divisors\n", current, divisors);
                break;
            }
            ++i;
        }
    }
}
